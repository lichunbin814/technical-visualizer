{"version":3,"file":"static/js/779.b5ddd6fc.chunk.js","mappings":"uKAEO,MAAMA,EAA4B,CACvC,CAAC,CAAEC,GAAI,OAAQC,MAAO,SACtB,CAAC,CAAED,GAAI,OAAQC,MAAO,SACtB,CAAC,CAAED,GAAI,SAAUC,MAAO,UAAY,CAAED,GAAI,OAAQC,MAAO,SACzD,CAAC,CAAED,GAAI,KAAMC,MAAO,MAAQ,CAAED,GAAI,IAAKC,MAAO,MAC9C,CAAC,CAAED,GAAI,SAAUC,MAAO,SAAUC,QAAQ,KAG/BC,EAAuC,CAClD,CAAEC,KAAM,OAAQC,GAAI,CAAC,SACrB,CAAED,KAAM,OAAQC,GAAI,CAAC,SAAU,SAC/B,CAAED,KAAM,SAAUC,GAAI,CAAC,OACvB,CAAED,KAAM,OAAQC,GAAI,CAAC,OAGVC,EAAe,CAC1BC,KAAM,CACJC,WAAY,UACZC,OAAQ,UACRC,MAAO,W,uECgBX,MAAMC,EAAcC,EAAAA,GAAOC,GAA0B;;;;;eAKtCC,GAASA,EAAMC,UAAY;EAGpCC,GAAYJ,EAAAA,EAAAA,IAAOK,EAAAA,EAAOC,GAAuB;;WAE5CJ,GAASA,EAAMJ,OAAS;;;EAK7BS,EAAYP,EAAAA,GAAOC,GAAG;;;;;;;EAStBO,GAAcR,EAAAA,EAAAA,IAAOK,EAAAA,EAAOJ,IAAI;;;EAKhCQ,EAAuBT,EAAAA,GAAOU,GAAG;;;;;;;;EAUjCC,GAAiBX,EAAAA,EAAAA,IAAOK,EAAAA,EAAOO,KAAK;;;;EAMpCC,EAAgBb,EAAAA,GAAOC,GAAsC;;;;;;;sBAO7CC,IAAK,IAAAY,EAAAC,EAAA,OACvBb,EAAMZ,OAAS,WACJ,QAAXwB,EAAAZ,EAAMc,aAAK,IAAAF,GAAM,QAANC,EAAXD,EAAanB,YAAI,IAAAoB,OAAN,EAAXA,EAAmBnB,aAAc,SAAS;kBAC5BM,IAAK,IAAAe,EAAAC,EAAA,OACnBhB,EAAMZ,OAAS,WACJ,QAAX2B,EAAAf,EAAMc,aAAK,IAAAC,GAAM,QAANC,EAAXD,EAAatB,YAAI,IAAAuB,OAAN,EAAXA,EAAmBrB,SAAU,SAAS;WAC/BK,IAAK,IAAAiB,EAAAC,EAAA,OACZlB,EAAMZ,OAAS,WACJ,QAAX6B,EAAAjB,EAAMc,aAAK,IAAAG,GAAM,QAANC,EAAXD,EAAaxB,YAAI,IAAAyB,OAAN,EAAXA,EAAmBtB,QAAS,SAAS;;;;;;;;;EA0IzC,EA/H4DuB,IAiBrD,IAADC,EAAA,IAjBuD,MAC3DC,EAAK,SACLC,EAAQ,YACRC,EAAW,WACXC,EAAU,UACVC,GAAY,EAAI,SAChBC,EAAW,CACTC,MAAO,EACPC,SAAU,IACX,gBACDC,EAAe,WACfC,EAAcC,IACZ,MAAMC,EAAQD,EAAIE,MAAM,KAAK,GAE7B,MAAkB,IADDC,SAASF,EAAMG,QAAQ,MAAO,MAAQ,EAClC,EACtB,MACDrB,GACDK,EACC,MAAMiB,GAAWC,EAAAA,EAAAA,QAAiD,CAAC,GAC7DC,GAAeD,EAAAA,EAAAA,QAAuB,OACrCE,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAoC,CAAC,GA2CnF,OAzCAC,EAAAA,EAAAA,YAAU,KACR,IAAKjB,IAAca,EAAaK,QAAS,OAEzC,MAAMC,EAAuBA,KAC3B,MAAMC,EAAmC,CAAC,EACpCC,EAAgBR,EAAaK,QAASI,wBAE5CxB,EAAYyB,SAASC,IACnB,MAAMC,EAAcd,EAASO,QAAQM,EAAW3D,MAChD,IAAK4D,EAAa,OAElB,MAAMC,EAAWD,EAAYH,wBACvBK,EAAQD,EAASE,KAAOF,EAASG,MAAQ,EAAIR,EAAcO,KAC3DE,EAAQJ,EAASK,IAAML,EAASM,OAASX,EAAcU,IAE7DP,EAAW1D,GAAGyD,SAASU,IACrB,MAAMC,EAAYvB,EAASO,QAAQe,GACnC,IAAKC,EAAW,OAEhB,MAAMC,EAASD,EAAUZ,wBACnBc,EAAMD,EAAOP,KAAOO,EAAON,MAAQ,EAAIR,EAAcO,KACrDS,EAAMF,EAAOJ,IAAMV,EAAcU,IAEjCO,GAAYR,EAAQO,GAAO,EACjCjB,EAAM,GAAGI,EAAW3D,QAAQoE,KAC1B,IAAIN,KAASG,MAAUH,KAASW,KAAYF,KAAOE,KAAYF,KAAOC,GAAK,GAC7E,IAGJtB,EAAmBK,EAAM,EAGrBmB,EAAQC,WAAWrB,EAAsB,KAG/C,OAFAsB,OAAOC,iBAAiB,SAAUvB,GAE3B,KACLwB,aAAaJ,GACbE,OAAOG,oBAAoB,SAAUzB,EAAqB,CAC3D,GACA,CAACnB,EAAWF,KAGb+C,EAAAA,EAAAA,MAACzE,EAAW,CAAC0E,IAAKjC,EAAcrC,SAAU4B,EAAgB2C,SAAA,CACvD/C,IACCgD,EAAAA,EAAAA,KAAClE,EAAoB,CAAAiE,SAClBE,OAAOC,QAAQpC,GAAiBqC,KAAIC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,IAAEjD,EAAKrB,GAAKmE,EAAA,OAC/CJ,EAAAA,EAAAA,KAAChE,EAAc,CAEbwE,EAAGvE,EACHwE,QAAS,CAAEC,WAAY,EAAGC,QAAS,GACnCC,QAAS,CAAEF,WAAY,EAAGC,QAAS,GACnCE,WAAY,CACVH,WAAY,CACVI,OAAsB,QAAfT,EAACpD,EAASC,aAAK,IAAAmD,EAAAA,EAAI,GAAKhD,EAAWC,GAC1CH,SAA2B,QAAnBmD,EAAErD,EAASE,gBAAQ,IAAAmD,EAAAA,EAAI,IAEjCK,QAAS,CACPG,OAAsB,QAAfP,EAACtD,EAASC,aAAK,IAAAqD,EAAAA,EAAI,GAAKlD,EAAWC,GAC1CH,SAAU,MAXTG,EAcL,OAKR0C,EAAAA,EAAAA,KAACvE,EAAS,CACRN,MAAO4B,EACP0D,QAAS,CAAEE,QAAS,GACpBC,QAAS5D,EAAY,CAAE2D,QAAS,GAAM,CAAEA,QAAS,GACjDE,WAAY,CAAEC,OAAsB,QAAfnE,EAACM,EAASC,aAAK,IAAAP,EAAAA,EAAI,GAAK,IAAMoD,SAElDnD,IAGFC,EAASsD,KAAI,CAAC5C,EAAOwD,KACpBf,EAAAA,EAAAA,KAACpE,EAAS,CAERoF,MAAO,CACLC,oBAAqB,UAAU1D,EAAM2D,gBACrCnB,SAEDxC,EAAM4C,KAAI,CAACnF,EAAMmG,KAAS,IAAAC,EAAA,OACzBpB,EAAAA,EAAAA,KAACnE,EAAW,CAEViE,IAAMuB,IAAgC1D,EAASO,QAAQlD,EAAKP,IAAM4G,CAAE,EACpEZ,QAAS,CAAEE,QAAS,EAAGW,MAAO,IAC9BV,QAAS5D,EACPhC,EAAKL,OAAS,CAAEgG,QAAS,GAAKW,MAAO,IAAQ,CAAEX,QAAS,EAAGW,MAAO,GAChE,CAAEX,QAAS,EAAGW,MAAO,IAEzBT,WAAY,CACVC,OAAsB,QAAfM,EAACnE,EAASC,aAAK,IAAAkE,EAAAA,EAAI,GAAmB,GAAbL,EAAiC,GAAZI,EACrDhE,SAAU,IACV4C,UAEFC,EAAAA,EAAAA,KAAC9D,EAAa,CAACvB,OAAQK,EAAKL,OAAQ0B,MAAOA,EAAM0D,SAAE/E,EAAKN,SAZnDM,EAAKP,GAaE,KApBX,GAAGmC,EAAM2E,cAAc7D,QAAQ,OAAQ,cAAcqD,SAwBlD,C,qHC3NlB,MAAMS,EAAYnG,EAAAA,GAAOC,GAAG;;;;;;;;;;;EAatBmG,GAAcpG,EAAAA,EAAAA,IAAOK,EAAAA,EAAOJ,IAAI;;;;;;;;;;;;;;;EAiBhCoG,EAAcrG,EAAAA,GAAOC,GAAG;;;;;;;EAiD9B,EAxC0DoB,IAAoB,IAAnB,UAAEM,GAAWN,EACtE,MAAMO,EAAW0E,EAAAA,GAAWC,MAAMC,QAAQ5E,UACpC,EAAE6E,IAAMC,EAAAA,EAAAA,MAERC,EAAW,+CAIPF,EAAE,yEAGHA,EAAE,qEAGJG,OAEP,OACEpC,EAAAA,EAAAA,MAAC2B,EAAS,CAAAzB,SAAA,EACRC,EAAAA,EAAAA,KAACyB,EAAW,CACVhB,QAAS,CAAEE,QAAS,EAAGuB,GAAI,IAC3BtB,QAAS5D,EAAY,CAAE2D,QAAS,EAAGuB,EAAG,GAAM,CAAEvB,QAAS,EAAGuB,GAAI,IAC9DrB,WAAY,CAAEC,MAAO7D,EAAS+E,SAAS9E,MAAOC,SAAUF,EAAS+E,SAAS7E,UAAW4C,UAErFC,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,OAGRhC,EAAAA,EAAAA,KAAC0B,EAAW,CAAA3B,UACVC,EAAAA,EAAAA,KAACmC,EAAAA,EAAiB,CAChBvF,MAAM,WACNC,SAAUrC,EAAAA,GACVsC,YAAalC,EAAAA,GACboC,UAAWA,EACXC,SAAU,CAAEC,MAAOD,EAASmF,SAASlF,OACrCb,MAAOtB,EAAAA,SAGD,C","sources":["constants/domTree.ts","components/TreeVisualization.tsx","components/animations/DomTreeAnimation.tsx"],"sourcesContent":["import { TreeNode, ConnectionData } from '../components/TreeVisualization';\n\nexport const domTreeData: TreeNode[][] = [\n  [{ id: 'html', label: 'html' }],\n  [{ id: 'body', label: 'body' }],\n  [{ id: 'header', label: 'header' }, { id: 'main', label: 'main' }],\n  [{ id: 'h1', label: 'h1' }, { id: 'p', label: 'p' }],\n  [{ id: 'script', label: 'script', hidden: true }]\n];\n\nexport const domTreeConnections: ConnectionData[] = [\n  { from: 'html', to: ['body'] },\n  { from: 'body', to: ['header', 'main'] },\n  { from: 'header', to: ['h1'] },\n  { from: 'main', to: ['p'] }\n];\n\nexport const domTreeTheme = {\n  node: {\n    background: '#eff6ff',\n    border: '#bfdbfe',\n    color: '#1d4ed8'\n  }\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nexport interface TreeNode {\n  id: string;\n  label: string;\n  hidden?: boolean;\n}\n\nexport interface ConnectionData {\n  from: string;\n  to: string[];\n  path?: string;\n}\n\nexport interface TreeVisualizationProps {\n  title: string;\n  treeData: TreeNode[][];\n  connections: ConnectionData[];\n  titleColor?: string;\n  isVisible?: boolean;\n  timeline?: {\n    start?: number;\n    duration?: number;\n  };\n  sectionGridArea?: string;\n  pathFilter?: (key: string) => number;\n  theme?: {\n    node?: {\n      background?: string;\n      border?: string;\n      color?: string;\n    }\n  };\n}\n\nconst TreeSection = styled.div<{ gridArea?: string }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  grid-area: ${props => props.gridArea || 'auto'};\n`;\n\nconst TreeTitle = styled(motion.h2)<{ color?: string }>`\n  font-weight: 600;\n  color: ${props => props.color || '#4338ca'};\n  margin: 0 0 1rem 0;\n  text-align: center;\n`;\n\nconst TreeLevel = styled.div`\n  display: grid;\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n  width: 100%;\n  justify-items: center;\n  position: relative;\n`;\n\nconst NodeWrapper = styled(motion.div)`\n  position: relative;\n  z-index: 2;\n`;\n\nconst ConnectionsContainer = styled.svg`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  pointer-events: none;\n`;\n\nconst ConnectionPath = styled(motion.path)`\n  fill: none;\n  stroke: #94A3B8;\n  stroke-width: 2px;\n`;\n\nconst NodeComponent = styled.div<{ hidden?: boolean; theme?: any }>`\n  padding: 0.25rem 0.75rem;\n  border-radius: 0.5rem;\n  border-width: 2px;\n  border-style: solid;\n  font-family: monospace;\n  font-size: 0.875rem;\n  background-color: ${props => \n    props.hidden ? '#f3f4f6' : \n    props.theme?.node?.background || '#eff6ff'};\n  border-color: ${props => \n    props.hidden ? '#e5e7eb' : \n    props.theme?.node?.border || '#bfdbfe'};\n  color: ${props => \n    props.hidden ? '#9ca3af' : \n    props.theme?.node?.color || '#1d4ed8'};\n  position: relative;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease-in-out;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst TreeVisualization: React.FC<TreeVisualizationProps> = ({\n  title,\n  treeData,\n  connections,\n  titleColor,\n  isVisible = true,\n  timeline = {\n    start: 0,\n    duration: 0.3\n  },\n  sectionGridArea,\n  pathFilter = (key: string) => {\n    const level = key.split('_')[0];\n    const levelNum = parseInt(level.replace(/\\D/g, '')) || 0;\n    return levelNum * 0.2;\n  },\n  theme\n}) => {\n  const nodeRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [connectionPaths, setConnectionPaths] = useState<{ [key: string]: string }>({});\n\n  useEffect(() => {\n    if (!isVisible || !containerRef.current) return;\n\n    const calculateConnections = () => {\n      const paths: { [key: string]: string } = {};\n      const containerRect = containerRef.current!.getBoundingClientRect();\n\n      connections.forEach((connection: ConnectionData) => {\n        const fromElement = nodeRefs.current[connection.from];\n        if (!fromElement) return;\n\n        const fromRect = fromElement.getBoundingClientRect();\n        const fromX = fromRect.left + fromRect.width / 2 - containerRect.left;\n        const fromY = fromRect.top + fromRect.height - containerRect.top;\n\n        connection.to.forEach((toId: string) => {\n          const toElement = nodeRefs.current[toId];\n          if (!toElement) return;\n\n          const toRect = toElement.getBoundingClientRect();\n          const toX = toRect.left + toRect.width / 2 - containerRect.left;\n          const toY = toRect.top - containerRect.top;\n\n          const controlY = (fromY + toY) / 2;\n          paths[`${connection.from}_${toId}`] = \n            `M${fromX},${fromY} C${fromX},${controlY} ${toX},${controlY} ${toX},${toY}`;\n        });\n      });\n\n      setConnectionPaths(paths);\n    };\n\n    const timer = setTimeout(calculateConnections, 100);\n    window.addEventListener('resize', calculateConnections);\n\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', calculateConnections);\n    };\n  }, [isVisible, connections]);\n\n  return (\n    <TreeSection ref={containerRef} gridArea={sectionGridArea}>\n      {isVisible && (\n        <ConnectionsContainer>\n          {Object.entries(connectionPaths).map(([key, path]) => (\n            <ConnectionPath\n              key={key}\n              d={path}\n              initial={{ pathLength: 0, opacity: 0 }}\n              animate={{ pathLength: 1, opacity: 1 }}\n              transition={{ \n                pathLength: { \n                  delay: (timeline.start ?? 0) + pathFilter(key),\n                  duration: timeline.duration ?? 0.3\n                },\n                opacity: { \n                  delay: (timeline.start ?? 0) + pathFilter(key), \n                  duration: 0.1 \n                }\n              }}\n            />\n          ))}\n        </ConnectionsContainer>\n      )}\n\n      <TreeTitle\n        color={titleColor}\n        initial={{ opacity: 0 }}\n        animate={isVisible ? { opacity: 1 } : { opacity: 0 }}\n        transition={{ delay: (timeline.start ?? 0) - 0.2 }}\n      >\n        {title}\n      </TreeTitle>\n      \n      {treeData.map((level, levelIndex) => (\n        <TreeLevel\n          key={`${title.toLowerCase().replace(/\\s+/g, '-')}-level-${levelIndex}`}\n          style={{\n            gridTemplateColumns: `repeat(${level.length}, 1fr)`\n          }}\n        >\n          {level.map((node, nodeIndex) => (\n            <NodeWrapper\n              key={node.id}\n              ref={(el: HTMLDivElement | null) => { nodeRefs.current[node.id] = el; }}\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={isVisible ? \n                node.hidden ? { opacity: 0.3, scale: 0.8 } : { opacity: 1, scale: 1 } \n                : { opacity: 0, scale: 0.8 }\n              }\n              transition={{ \n                delay: (timeline.start ?? 0) + (levelIndex * 0.2) + (nodeIndex * 0.1), \n                duration: 0.3 \n              }}\n            >\n              <NodeComponent hidden={node.hidden} theme={theme}>{node.label}</NodeComponent>\n            </NodeWrapper>\n          ))}\n        </TreeLevel>\n      ))}\n    </TreeSection>\n  );\n};\n\nexport default TreeVisualization;\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { animations } from '../../constants/animations';\nimport TreeVisualization, { TreeNode, ConnectionData } from '../TreeVisualization';\nimport { domTreeData, domTreeConnections, domTreeTheme } from '../../constants/domTree';\n\ninterface DomTreeAnimationProps {\n  isVisible: boolean;\n}\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: flex-start;\n    justify-content: center;\n  }\n`;\n\nconst CodeDisplay = styled(motion.div)`\n  width: 100%;\n  max-width: 16rem;\n  background-color: #1f2937;\n  border-radius: 0.5rem;\n  padding: 16px;\n  font-family: monospace;\n  font-size: 0.75rem;\n  color: white;\n  margin-bottom: 2rem;\n  \n  @media (min-width: 768px) {\n    margin-right: 2rem;\n    margin-bottom: 0;\n  }\n`;\n\nconst TreeWrapper = styled.div`\n  flex: 1;\n  max-width: 320px;\n  \n  @media (max-width: 500px) {\n    padding: 0 0.5rem;\n  }\n`;\n\nconst DomTreeAnimation: React.FC<DomTreeAnimationProps> = ({ isVisible }) => {\n  const timeline = animations.steps.domTree.timeline;\n  const { t } = useTranslation();\n\n  const htmlCode = `\n<html>\n  <body>\n    <header>\n      <h1>${t('animations.domTree.title')}</h1>\n    </header>\n    <main>\n      <p>${t('animations.domTree.content')}</p>\n    </main>\n  </body>\n</html>`.trim();\n\n  return (\n    <Container>\n      <CodeDisplay\n        initial={{ opacity: 0, x: -20 }}\n        animate={isVisible ? { opacity: 1, x: 0 } : { opacity: 0, x: -20 }}\n        transition={{ delay: timeline.htmlCode.start, duration: timeline.htmlCode.duration }}\n      >\n        <pre>{htmlCode}</pre>\n      </CodeDisplay>\n\n      <TreeWrapper>\n        <TreeVisualization\n          title=\"DOM Tree\"\n          treeData={domTreeData}\n          connections={domTreeConnections}\n          isVisible={isVisible}\n          timeline={{ start: timeline.htmlNode.start }}\n          theme={domTreeTheme}\n        />\n      </TreeWrapper>\n    </Container>\n  );\n};\n\nexport default DomTreeAnimation;\n"],"names":["domTreeData","id","label","hidden","domTreeConnections","from","to","domTreeTheme","node","background","border","color","TreeSection","styled","div","props","gridArea","TreeTitle","motion","h2","TreeLevel","NodeWrapper","ConnectionsContainer","svg","ConnectionPath","path","NodeComponent","_props$theme","_props$theme$node","theme","_props$theme2","_props$theme2$node","_props$theme3","_props$theme3$node","_ref","_timeline$start3","title","treeData","connections","titleColor","isVisible","timeline","start","duration","sectionGridArea","pathFilter","key","level","split","parseInt","replace","nodeRefs","useRef","containerRef","connectionPaths","setConnectionPaths","useState","useEffect","current","calculateConnections","paths","containerRect","getBoundingClientRect","forEach","connection","fromElement","fromRect","fromX","left","width","fromY","top","height","toId","toElement","toRect","toX","toY","controlY","timer","setTimeout","window","addEventListener","clearTimeout","removeEventListener","_jsxs","ref","children","_jsx","Object","entries","map","_ref2","_timeline$start","_timeline$duration","_timeline$start2","d","initial","pathLength","opacity","animate","transition","delay","levelIndex","style","gridTemplateColumns","length","nodeIndex","_timeline$start4","el","scale","toLowerCase","Container","CodeDisplay","TreeWrapper","animations","steps","domTree","t","useTranslation","htmlCode","trim","x","TreeVisualization","htmlNode"],"sourceRoot":""}