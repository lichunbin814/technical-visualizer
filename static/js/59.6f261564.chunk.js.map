{"version":3,"file":"static/js/59.6f261564.chunk.js","mappings":"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","sources":["constants/domTree.ts","components/animations/RenderTreeAnimation.tsx","components/TreeVisualization.tsx"],"sourcesContent":["import { TreeNode, ConnectionData } from '../components/TreeVisualization';\n\nexport const domTreeData: TreeNode[][] = [\n  [{ id: 'html', label: 'html' }],\n  [{ id: 'body', label: 'body' }],\n  [{ id: 'header', label: 'header' }, { id: 'main', label: 'main' }],\n  [{ id: 'h1', label: 'h1' }, { id: 'p', label: 'p' }],\n  [{ id: 'script', label: 'script', hidden: true }]\n];\n\nexport const domTreeConnections: ConnectionData[] = [\n  { from: 'html', to: ['body'] },\n  { from: 'body', to: ['header', 'main'] },\n  { from: 'header', to: ['h1'] },\n  { from: 'main', to: ['p'] }\n];\n\nexport const domTreeTheme = {\n  node: {\n    background: '#eff6ff',\n    border: '#bfdbfe',\n    color: '#1d4ed8'\n  }\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport TreeVisualization, { TreeNode, ConnectionData } from '../TreeVisualization';\nimport { domTreeData, domTreeConnections, domTreeTheme } from '../../constants/domTree';\n\ninterface RenderTreeAnimationProps {\n  isVisible: boolean;\n}\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-areas:\n    \"header header\"\n    \"trees-container trees-container\"\n    \"merge merge\"\n    \"render-tree render-tree\";\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  width: 100%;\n  padding: 2rem;\n`;\n\nconst TreesContainer = styled(motion.div)`\n  grid-area: trees-container;\n  display: grid;\n  grid-template-areas:\n    \"container-header container-header\"\n    \"dom-tree cssom-tree\";\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n  position: relative;\n  border: 2px dashed #94a3b8;\n  border-radius: 1rem;\n  padding: 1.5rem;\n  background-color: rgba(241, 245, 249, 0.3);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n`;\n\nconst ContainerTitle = styled.h3`\n  grid-area: container-header;\n  font-weight: 600;\n  color: #475569;\n  margin: 0 0 1rem 0;\n  text-align: center;\n`;\n\nconst ArrowContainer = styled(motion.div)`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n  z-index: 2;\n`;\n\nconst Arrow = styled(motion.div)`\n  position: absolute;\n  width: 2px;\n  height: 60px;\n  background: linear-gradient(to bottom, #94a3b8, #4f46e5);\n  bottom: -60px;\n  left: 50%;\n  transform: translateX(-50%);\n  \n  &:after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 0;\n    height: 0;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 10px solid #4f46e5;\n  }\n`;\n\nconst ProcessLabel = styled(motion.div)`\n  position: absolute;\n  padding: 0.5rem 1rem;\n  background-color: #f8fafc;\n  border-radius: 0.5rem;\n  border: 1px solid #cbd5e1;\n  color: #334155;\n  font-size: 0.875rem;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  z-index: 3;\n  left: 50%;\n  top: 91%;\n  transform: translate(-50%, -50%);\n`;\n\n\nconst RenderTreeAnimation: React.FC<RenderTreeAnimationProps> = ({ isVisible }) => {\n  const timeline = {\n    treesDisplay: { start: 0.3 },\n    treesContainer: { start: 0.5 },\n    processArrow: { start: 1.2, duration: 0.5 },\n    renderTreeResult: { start: 1.8 }\n  };\n\n  const cssomTree: TreeNode[][] = [\n    [{ id: 'styles', label: 'styles' }],\n    [\n      { id: 'header-style', label: 'header' },\n      { id: 'main-style', label: 'main' },\n      { id: 'h1-style', label: 'h1' },\n      { id: 'p-style', label: 'p' }\n    ]\n  ];\n\n  const renderTree: TreeNode[][] = [\n    [{ id: 'render-html', label: 'html' }],\n    [{ id: 'render-body', label: 'body' }],\n    [\n      { id: 'render-header', label: 'header + style' },\n      { id: 'render-main', label: 'main + style' }\n    ],\n    [\n      { id: 'render-h1', label: 'h1 + style' },\n      { id: 'render-p', label: 'p + style' }\n    ]\n  ];\n\n  const cssomConnections: ConnectionData[] = [\n    { from: 'styles', to: ['header-style', 'main-style', 'h1-style', 'p-style'] },\n  ];\n\n  const renderTreeConnections: ConnectionData[] = [\n    { from: 'render-html', to: ['render-body'] },\n    { from: 'render-body', to: ['render-header', 'render-main'] },\n    { from: 'render-header', to: ['render-h1'] },\n    { from: 'render-main', to: ['render-p'] },\n  ];\n\n  return (\n    <Container>\n      <TreesContainer\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={isVisible ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.95 }}\n        transition={{ delay: timeline.treesContainer.start, duration: 0.4 }}\n      >\n        <ContainerTitle>Browser's Internal Representation</ContainerTitle>\n\n        <ArrowContainer\n          initial={{ opacity: 0 }}\n          animate={isVisible ? { opacity: 1 } : { opacity: 0 }}\n          transition={{ delay: timeline.processArrow.start, duration: 0.3 }}\n        >\n          <Arrow\n            initial={{ height: 0 }}\n            animate={isVisible ? { height: 60 } : { height: 0 }}\n            transition={{ \n              delay: timeline.processArrow.start, \n              duration: timeline.processArrow.duration \n            }}\n          />\n          <ProcessLabel\n            initial={{ opacity: 0 }}\n            animate={isVisible ? { opacity: 1 } : { opacity: 0 }}\n            transition={{ \n              delay: timeline.processArrow.start + 0.2, \n              duration: 0.3 \n            }}\n          >\n            Construction Process\n          </ProcessLabel>\n        </ArrowContainer>\n\n        <TreeVisualization\n          title=\"DOM Tree\"\n          treeData={domTreeData}\n          connections={domTreeConnections}\n          isVisible={isVisible}\n          timeline={{ start: timeline.treesDisplay.start }}\n          titleColor=\"#1e40af\"\n          sectionGridArea=\"dom-tree\"\n          theme={domTreeTheme}\n        />\n\n        <TreeVisualization\n          title=\"CSSOM Tree\"\n          treeData={cssomTree}\n          connections={cssomConnections}\n          isVisible={isVisible}\n          timeline={{ start: timeline.treesDisplay.start }}\n          titleColor=\"#6b21a8\"\n          sectionGridArea=\"cssom-tree\"\n          theme={{\n            node: {\n              background: '#f5f3ff',\n              border: '#e9d5ff',\n              color: '#7e22ce'\n            }\n          }}\n        />\n      </TreesContainer>\n\n      <TreeVisualization\n        title=\"Render Tree\"\n        treeData={renderTree}\n        connections={renderTreeConnections}\n        isVisible={isVisible}\n        timeline={{ start: timeline.renderTreeResult.start }}\n        pathFilter={(key: string) => {\n          const [from] = key.split('_');\n          if (from === 'render-html') return 0;\n          if (from === 'render-body') return 0.2;\n          if (from === 'render-header' || from === 'render-main') return 0.4;\n          return 0.6;\n        }}\n        titleColor=\"#4338ca\"\n        sectionGridArea=\"render-tree\"\n        theme={{\n          node: {\n            background: 'linear-gradient(to right, #eff6ff, #f5f3ff)',\n            border: '#c7d2fe',\n            color: '#4338ca'\n          }\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default RenderTreeAnimation;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nexport interface TreeNode {\n  id: string;\n  label: string;\n  hidden?: boolean;\n}\n\nexport interface ConnectionData {\n  from: string;\n  to: string[];\n  path?: string;\n}\n\nexport interface TreeVisualizationProps {\n  title: string;\n  treeData: TreeNode[][];\n  connections: ConnectionData[];\n  titleColor?: string;\n  isVisible?: boolean;\n  timeline?: {\n    start?: number;\n    duration?: number;\n  };\n  sectionGridArea?: string;\n  pathFilter?: (key: string) => number;\n  theme?: {\n    node?: {\n      background?: string;\n      border?: string;\n      color?: string;\n    }\n  };\n}\n\nconst TreeSection = styled.div<{ gridArea?: string }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  grid-area: ${props => props.gridArea || 'auto'};\n`;\n\nconst TreeTitle = styled(motion.h2)<{ color?: string }>`\n  font-weight: 600;\n  color: ${props => props.color || '#4338ca'};\n  margin: 0 0 1rem 0;\n  text-align: center;\n`;\n\nconst TreeLevel = styled.div`\n  display: grid;\n  gap: 1rem;\n  margin-bottom: 1.5rem;\n  width: 100%;\n  justify-items: center;\n  position: relative;\n`;\n\nconst NodeWrapper = styled(motion.div)`\n  position: relative;\n  z-index: 2;\n`;\n\nconst ConnectionsContainer = styled.svg`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  pointer-events: none;\n`;\n\nconst ConnectionPath = styled(motion.path)`\n  fill: none;\n  stroke: #94A3B8;\n  stroke-width: 2px;\n`;\n\nconst NodeComponent = styled.div<{ hidden?: boolean; theme?: any }>`\n  padding: 0.25rem 0.75rem;\n  border-radius: 0.5rem;\n  border-width: 2px;\n  border-style: solid;\n  font-family: monospace;\n  font-size: 0.875rem;\n  background-color: ${props => \n    props.hidden ? '#f3f4f6' : \n    props.theme?.node?.background || '#eff6ff'};\n  border-color: ${props => \n    props.hidden ? '#e5e7eb' : \n    props.theme?.node?.border || '#bfdbfe'};\n  color: ${props => \n    props.hidden ? '#9ca3af' : \n    props.theme?.node?.color || '#1d4ed8'};\n  position: relative;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  transition: all 0.2s ease-in-out;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst TreeVisualization: React.FC<TreeVisualizationProps> = ({\n  title,\n  treeData,\n  connections,\n  titleColor,\n  isVisible = true,\n  timeline = {\n    start: 0,\n    duration: 0.3\n  },\n  sectionGridArea,\n  pathFilter = (key: string) => {\n    const level = key.split('_')[0];\n    const levelNum = parseInt(level.replace(/\\D/g, '')) || 0;\n    return levelNum * 0.2;\n  },\n  theme\n}) => {\n  const nodeRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [connectionPaths, setConnectionPaths] = useState<{ [key: string]: string }>({});\n\n  useEffect(() => {\n    if (!isVisible || !containerRef.current) return;\n\n    const calculateConnections = () => {\n      const paths: { [key: string]: string } = {};\n      const containerRect = containerRef.current!.getBoundingClientRect();\n\n      connections.forEach((connection: ConnectionData) => {\n        const fromElement = nodeRefs.current[connection.from];\n        if (!fromElement) return;\n\n        const fromRect = fromElement.getBoundingClientRect();\n        const fromX = fromRect.left + fromRect.width / 2 - containerRect.left;\n        const fromY = fromRect.top + fromRect.height - containerRect.top;\n\n        connection.to.forEach((toId: string) => {\n          const toElement = nodeRefs.current[toId];\n          if (!toElement) return;\n\n          const toRect = toElement.getBoundingClientRect();\n          const toX = toRect.left + toRect.width / 2 - containerRect.left;\n          const toY = toRect.top - containerRect.top;\n\n          const controlY = (fromY + toY) / 2;\n          paths[`${connection.from}_${toId}`] = \n            `M${fromX},${fromY} C${fromX},${controlY} ${toX},${controlY} ${toX},${toY}`;\n        });\n      });\n\n      setConnectionPaths(paths);\n    };\n\n    const timer = setTimeout(calculateConnections, 100);\n    window.addEventListener('resize', calculateConnections);\n\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', calculateConnections);\n    };\n  }, [isVisible, connections]);\n\n  return (\n    <TreeSection ref={containerRef} gridArea={sectionGridArea}>\n      {isVisible && (\n        <ConnectionsContainer>\n          {Object.entries(connectionPaths).map(([key, path]) => (\n            <ConnectionPath\n              key={key}\n              d={path}\n              initial={{ pathLength: 0, opacity: 0 }}\n              animate={{ pathLength: 1, opacity: 1 }}\n              transition={{ \n                pathLength: { \n                  delay: (timeline.start ?? 0) + pathFilter(key),\n                  duration: timeline.duration ?? 0.3\n                },\n                opacity: { \n                  delay: (timeline.start ?? 0) + pathFilter(key), \n                  duration: 0.1 \n                }\n              }}\n            />\n          ))}\n        </ConnectionsContainer>\n      )}\n\n      <TreeTitle\n        color={titleColor}\n        initial={{ opacity: 0 }}\n        animate={isVisible ? { opacity: 1 } : { opacity: 0 }}\n        transition={{ delay: (timeline.start ?? 0) - 0.2 }}\n      >\n        {title}\n      </TreeTitle>\n      \n      {treeData.map((level, levelIndex) => (\n        <TreeLevel\n          key={`${title.toLowerCase().replace(/\\s+/g, '-')}-level-${levelIndex}`}\n          style={{\n            gridTemplateColumns: `repeat(${level.length}, 1fr)`\n          }}\n        >\n          {level.map((node, nodeIndex) => (\n            <NodeWrapper\n              key={node.id}\n              ref={(el: HTMLDivElement | null) => { nodeRefs.current[node.id] = el; }}\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={isVisible ? \n                node.hidden ? { opacity: 0.3, scale: 0.8 } : { opacity: 1, scale: 1 } \n                : { opacity: 0, scale: 0.8 }\n              }\n              transition={{ \n                delay: (timeline.start ?? 0) + (levelIndex * 0.2) + (nodeIndex * 0.1), \n                duration: 0.3 \n              }}\n            >\n              <NodeComponent hidden={node.hidden} theme={theme}>{node.label}</NodeComponent>\n            </NodeWrapper>\n          ))}\n        </TreeLevel>\n      ))}\n    </TreeSection>\n  );\n};\n\nexport default TreeVisualization;\n"],"names":["domTreeData","id","label","hidden","domTreeConnections","from","to","domTreeTheme","node","background","border","color","Container","styled","div","TreesContainer","motion","ContainerTitle","h3","ArrowContainer","Arrow","ProcessLabel","_ref","isVisible","timeline","start","duration","_jsxs","children","initial","opacity","scale","animate","transition","delay","_jsx","height","TreeVisualization","title","treeData","connections","titleColor","sectionGridArea","theme","pathFilter","key","split","TreeSection","props","gridArea","TreeTitle","h2","TreeLevel","NodeWrapper","ConnectionsContainer","svg","ConnectionPath","path","NodeComponent","_props$theme","_props$theme$node","_props$theme2","_props$theme2$node","_props$theme3","_props$theme3$node","_timeline$start3","level","parseInt","replace","nodeRefs","useRef","containerRef","connectionPaths","setConnectionPaths","useState","useEffect","current","calculateConnections","paths","containerRect","getBoundingClientRect","forEach","connection","fromElement","fromRect","fromX","left","width","fromY","top","toId","toElement","toRect","toX","toY","controlY","timer","setTimeout","window","addEventListener","clearTimeout","removeEventListener","ref","Object","entries","map","_ref2","_timeline$start","_timeline$duration","_timeline$start2","d","pathLength","levelIndex","style","gridTemplateColumns","length","nodeIndex","_timeline$start4","el","toLowerCase"],"sourceRoot":""}